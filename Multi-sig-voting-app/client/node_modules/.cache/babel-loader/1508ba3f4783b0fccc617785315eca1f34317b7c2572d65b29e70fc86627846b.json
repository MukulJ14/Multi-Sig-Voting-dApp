{"ast":null,"code":"var _jsxFileName = \"/Users/mukuljindal/Local/projects/Multi-sig-voting-app/work/client/src/App.js\",\n  _s = $RefreshSig$();\nimport Candidate from \"./Components/Candidate.js\";\nimport { useState, useEffect } from \"react\";\nimport abi from './abi.js';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ethers = require(\"ethers\");\n\n//contract address : 0x5FbDB2315678afecb367f032d93F642f64180aa3\n\n//add getter functions inside the contract to actually access anything through mappings\n//to access values of a struct in mapping, first return the promise, then use the variable rather than doing simultaneously\n//use ethers@6.7.1 to deploy and use ethers@5.7.2 to run\n//if there's an rpc error, cleat activity logs on metamask->settings->advanced->clear\n\nfunction App() {\n  _s();\n  const [arbiterCount, setArbiterCount] = useState(0);\n  const [arbiterAddress, setArbiterAddress] = useState(\"\");\n  const [arbiterStatus, setArbiterStatus] = useState(\"\");\n  const [candidatesCount, setCandidatesCount] = useState(0);\n  const [votingContract, setContract] = useState(\"\");\n  const [arbiterApprovalAddress, setArbiterApprovalAddress] = useState(\"\");\n  const [reasonRevertApproval, setReasonRevertApproval] = useState(\"\");\n  const [arbiterDelete, setArbiterDelete] = useState(\"\");\n  const [reasonRevertDelete, setReasonRevertDelete] = useState(\"\");\n  const [candidateAddress, setCandidateAddress] = useState(\"\");\n  const [candidateName, setCandidateName] = useState(\"\");\n  const [candidateSymbol, setCandidateSymbol] = useState(\"\");\n  let [candidates, setCandidates] = useState([]);\n  const [reasonRevertCanAdd, setReasonRevertCanAdd] = useState(\"\");\n  async function connect() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n      // const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      // console.log('Connected accounts:', accounts);\n      const signer = provider.getSigner(0);\n      const votingContract = new ethers.Contract(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\", abi, signer);\n      setContract(votingContract);\n    }\n  }\n\n  // async function getCandidatesCount() {\n  //   try {\n  //     let totalCan = await votingContract.getCandidateCount();\n\n  //     let num = totalCan.toNumber();\n  //     setCandidatesCount(num);\n  //   }\n  //   catch (error) {\n  //     console.log(error);\n  //   }\n  // }\n\n  async function getArbiterCount() {\n    try {\n      const totalArbiters = await votingContract.getArbiterCount();\n      const num = totalArbiters.toNumber();\n      setArbiterCount(num);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // useEffect(() => {\n  //   connect();\n  //   getCandidates();\n  // }, []);\n\n  // setTimeout(() => {\n  //   getCandidatesCount();\n  //   getArbiterCount();\n  // }, 500);\n\n  // if (candidates.length !== candidatesCount) {\n  //   getCandidates();\n  // }\n\n  // async function getArbiterStatus() {\n  //   if (!ethers.utils.isAddress(arbiterAddress)) {\n  //     setArbiterStatus(\"Invalid Ethereum Address\");\n  //     setTimeout(() => {\n  //       setArbiterStatus(\"\");\n  //     }, 1600);\n  //     return;\n  //   }\n\n  //   const resultObj = await votingContract.getArbiterStatus(arbiterAddress);\n  //   const result = resultObj.approved;\n  //   setArbiterStatus(result.toString());\n  //   setTimeout(() => {\n  //     setArbiterAddress(\"\");\n  //     setArbiterStatus(\"\");\n  //   }, 1600);\n  // }\n\n  // async function addArbiter() {\n  //   try {\n  //     if (!ethers.utils.isAddress(arbiterApprovalAddress)) {\n  //       setReasonRevertApproval(\"Invalid Ethereum Address\");\n  //       setTimeout(() => {\n  //         setReasonRevertApproval(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     let add = await votingContract.addAndApproveArbiter(arbiterApprovalAddress);\n  //     await add.wait();\n  //     console.log(add);\n\n  //     votingContract.on(\"ArbiterAdded\", () => {\n  //       getArbiterCount();\n  //     })\n  //   }\n  //   catch (error) {\n  //     setTimeout(() => {\n  //       if (error.message.includes(\"reverted with reason string 'You're not an Arbiter'\")) {\n  //         setReasonRevertApproval(\"Already Voted\");\n  //       } else if (error.message.includes(\"reverted with reason string 'Already Voted'\")) {\n  //         setReasonRevertApproval(\"Already Voted\");\n  //       } else {\n  //         console.log(\"Approve Arbiter Error:\", error);\n  //       }\n  //     }, 1600);\n\n  //   }\n  // }\n\n  // async function deleteArbiter() {\n  //   try {\n  //     if (!ethers.utils.isAddress(arbiterDelete)) {\n  //       setReasonRevertDelete(\"Invalid Ethereum Address\");\n  //       setTimeout(() => {\n  //         setReasonRevertDelete(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     let deleted = await votingContract.deleteArbiter(arbiterDelete);\n  //     await deleted.wait();\n  //     setArbiterAddress(\"\");\n  //     setArbiterStatus(\"\");\n  //     console.log(deleted);\n  //   } catch (error) {\n  //     setTimeout(() => {\n  //       if (error.message.includes(\"reverted with reason string 'That's not an Arbiter'\")) {\n  //         setReasonRevertDelete(\"Address not an arbiter\");\n  //       } else if (error.message.includes(\"reverted with reason string 'You're not an Arbiter'\")) {\n  //         setReasonRevertDelete(\"You're not an arbiter\")\n  //       } else {\n  //         console.log(\"Delete Arbiter Error:\", error);\n  //       }\n  //     }, 1600);\n  //   }\n  // }\n\n  // async function addCandidateProposal() {\n  //   try {\n\n  //     if (!ethers.utils.isAddress(candidateAddress)) {\n  //       setReasonRevertCanAdd(\"Invalid Ethereum Address\");\n  //       setTimeout(() => {\n  //         setReasonRevertCanAdd(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     if (candidateName === \"\" && candidateSymbol === \"\") {\n  //       setReasonRevertCanAdd(\"Empty Inputs\");\n  //       setTimeout(() => {\n  //         setReasonRevertCanAdd(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     if (candidateName === \"\") {\n  //       setReasonRevertCanAdd(\"Empty Input\");\n  //       setTimeout(() => {\n  //         setReasonRevertCanAdd(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     if (candidateSymbol === \"\") {\n  //       setReasonRevertCanAdd(\"Empty Input Symbol\");\n  //       setTimeout(() => {\n  //         setReasonRevertCanAdd(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     const add = await votingContract.addCandidateProposal(candidateAddress, candidateName, candidateSymbol);\n  //     await add.wait();\n  //     console.log(add);\n\n  //     votingContract.on(\"CandidateAdded\", () => {\n  //       getCandidates();\n  //     })\n  //   }\n  //   catch (error) {\n  //     setTimeout(() => {\n  //       if (error.message.includes(\"reverted with reason string 'Already Voted'\")) {\n  //         setReasonRevertCanAdd(\"Already Voted\");\n  //       } else if (error.message.includes(\"reverted with reason string 'You're not an Arbiter'\")) {\n  //         setReasonRevertCanAdd(\"You're not an  Arbiter\");\n  //       } else {\n  //         console.log(\"Candidate Add Error:\", error);\n  //       }\n  //     }, 1600)\n  //   }\n  // }\n\n  // async function getCandidates() {\n  //   let c = [];\n  //   for (let i = 0; i < candidatesCount; i++) {\n  //     let candidate = await votingContract.getCandidate(i);\n  //     c.push(candidate);\n  //   }\n  //   setCandidates(c);\n  // }\n\n  // if (candidates.length !== candidatesCount) {\n  //   getCandidates();\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: getArbiterCount ? true : false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XqqB3tui0raIUXDFjThcHSSrEyI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Candidate","useState","useEffect","abi","jsxDEV","_jsxDEV","ethers","require","App","_s","arbiterCount","setArbiterCount","arbiterAddress","setArbiterAddress","arbiterStatus","setArbiterStatus","candidatesCount","setCandidatesCount","votingContract","setContract","arbiterApprovalAddress","setArbiterApprovalAddress","reasonRevertApproval","setReasonRevertApproval","arbiterDelete","setArbiterDelete","reasonRevertDelete","setReasonRevertDelete","candidateAddress","setCandidateAddress","candidateName","setCandidateName","candidateSymbol","setCandidateSymbol","candidates","setCandidates","reasonRevertCanAdd","setReasonRevertCanAdd","connect","window","ethereum","provider","providers","Web3Provider","signer","getSigner","Contract","getArbiterCount","totalArbiters","num","toNumber","error","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mukuljindal/Local/projects/Multi-sig-voting-app/work/client/src/App.js"],"sourcesContent":["import Candidate from \"./Components/Candidate.js\";\nimport { useState, useEffect } from \"react\";\nimport abi from './abi.js';\nimport \"./App.css\";\n\nconst ethers = require(\"ethers\");\n\n//contract address : 0x5FbDB2315678afecb367f032d93F642f64180aa3\n\n\n//add getter functions inside the contract to actually access anything through mappings\n//to access values of a struct in mapping, first return the promise, then use the variable rather than doing simultaneously\n//use ethers@6.7.1 to deploy and use ethers@5.7.2 to run\n//if there's an rpc error, cleat activity logs on metamask->settings->advanced->clear\n\nfunction App() {\n\n  const [arbiterCount, setArbiterCount] = useState(0);\n  const [arbiterAddress, setArbiterAddress] = useState(\"\");\n  const [arbiterStatus, setArbiterStatus] = useState(\"\");\n  const [candidatesCount, setCandidatesCount] = useState(0);\n  const [votingContract, setContract] = useState(\"\");\n  const [arbiterApprovalAddress, setArbiterApprovalAddress] = useState(\"\");\n  const [reasonRevertApproval, setReasonRevertApproval] = useState(\"\");\n  const [arbiterDelete, setArbiterDelete] = useState(\"\");\n  const [reasonRevertDelete, setReasonRevertDelete] = useState(\"\");\n  const [candidateAddress, setCandidateAddress] = useState(\"\");\n  const [candidateName, setCandidateName] = useState(\"\");\n  const [candidateSymbol, setCandidateSymbol] = useState(\"\");\n  let [candidates, setCandidates] = useState([]);\n  const [reasonRevertCanAdd, setReasonRevertCanAdd] = useState(\"\");\n\n\n  async function connect() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n      // const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      // console.log('Connected accounts:', accounts);\n      const signer = provider.getSigner(0);\n\n      const votingContract = new ethers.Contract(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\", abi, signer);\n      setContract(votingContract);\n    }\n  }\n\n\n  // async function getCandidatesCount() {\n  //   try {\n  //     let totalCan = await votingContract.getCandidateCount();\n\n  //     let num = totalCan.toNumber();\n  //     setCandidatesCount(num);\n  //   }\n  //   catch (error) {\n  //     console.log(error);\n  //   }\n  // }\n\n  async function getArbiterCount() {\n    try {\n      const totalArbiters = await votingContract.getArbiterCount();\n      const num = totalArbiters.toNumber();\n      setArbiterCount(num);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // useEffect(() => {\n  //   connect();\n  //   getCandidates();\n  // }, []);\n\n  // setTimeout(() => {\n  //   getCandidatesCount();\n  //   getArbiterCount();\n  // }, 500);\n\n  // if (candidates.length !== candidatesCount) {\n  //   getCandidates();\n  // }\n\n  // async function getArbiterStatus() {\n  //   if (!ethers.utils.isAddress(arbiterAddress)) {\n  //     setArbiterStatus(\"Invalid Ethereum Address\");\n  //     setTimeout(() => {\n  //       setArbiterStatus(\"\");\n  //     }, 1600);\n  //     return;\n  //   }\n\n  //   const resultObj = await votingContract.getArbiterStatus(arbiterAddress);\n  //   const result = resultObj.approved;\n  //   setArbiterStatus(result.toString());\n  //   setTimeout(() => {\n  //     setArbiterAddress(\"\");\n  //     setArbiterStatus(\"\");\n  //   }, 1600);\n  // }\n\n  // async function addArbiter() {\n  //   try {\n  //     if (!ethers.utils.isAddress(arbiterApprovalAddress)) {\n  //       setReasonRevertApproval(\"Invalid Ethereum Address\");\n  //       setTimeout(() => {\n  //         setReasonRevertApproval(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     let add = await votingContract.addAndApproveArbiter(arbiterApprovalAddress);\n  //     await add.wait();\n  //     console.log(add);\n\n  //     votingContract.on(\"ArbiterAdded\", () => {\n  //       getArbiterCount();\n  //     })\n  //   }\n  //   catch (error) {\n  //     setTimeout(() => {\n  //       if (error.message.includes(\"reverted with reason string 'You're not an Arbiter'\")) {\n  //         setReasonRevertApproval(\"Already Voted\");\n  //       } else if (error.message.includes(\"reverted with reason string 'Already Voted'\")) {\n  //         setReasonRevertApproval(\"Already Voted\");\n  //       } else {\n  //         console.log(\"Approve Arbiter Error:\", error);\n  //       }\n  //     }, 1600);\n\n  //   }\n  // }\n\n  // async function deleteArbiter() {\n  //   try {\n  //     if (!ethers.utils.isAddress(arbiterDelete)) {\n  //       setReasonRevertDelete(\"Invalid Ethereum Address\");\n  //       setTimeout(() => {\n  //         setReasonRevertDelete(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     let deleted = await votingContract.deleteArbiter(arbiterDelete);\n  //     await deleted.wait();\n  //     setArbiterAddress(\"\");\n  //     setArbiterStatus(\"\");\n  //     console.log(deleted);\n  //   } catch (error) {\n  //     setTimeout(() => {\n  //       if (error.message.includes(\"reverted with reason string 'That's not an Arbiter'\")) {\n  //         setReasonRevertDelete(\"Address not an arbiter\");\n  //       } else if (error.message.includes(\"reverted with reason string 'You're not an Arbiter'\")) {\n  //         setReasonRevertDelete(\"You're not an arbiter\")\n  //       } else {\n  //         console.log(\"Delete Arbiter Error:\", error);\n  //       }\n  //     }, 1600);\n  //   }\n  // }\n\n  // async function addCandidateProposal() {\n  //   try {\n\n  //     if (!ethers.utils.isAddress(candidateAddress)) {\n  //       setReasonRevertCanAdd(\"Invalid Ethereum Address\");\n  //       setTimeout(() => {\n  //         setReasonRevertCanAdd(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     if (candidateName === \"\" && candidateSymbol === \"\") {\n  //       setReasonRevertCanAdd(\"Empty Inputs\");\n  //       setTimeout(() => {\n  //         setReasonRevertCanAdd(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     if (candidateName === \"\") {\n  //       setReasonRevertCanAdd(\"Empty Input\");\n  //       setTimeout(() => {\n  //         setReasonRevertCanAdd(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     if (candidateSymbol === \"\") {\n  //       setReasonRevertCanAdd(\"Empty Input Symbol\");\n  //       setTimeout(() => {\n  //         setReasonRevertCanAdd(\"\");\n  //       }, 1600);\n  //       return;\n  //     }\n\n  //     const add = await votingContract.addCandidateProposal(candidateAddress, candidateName, candidateSymbol);\n  //     await add.wait();\n  //     console.log(add);\n\n  //     votingContract.on(\"CandidateAdded\", () => {\n  //       getCandidates();\n  //     })\n  //   }\n  //   catch (error) {\n  //     setTimeout(() => {\n  //       if (error.message.includes(\"reverted with reason string 'Already Voted'\")) {\n  //         setReasonRevertCanAdd(\"Already Voted\");\n  //       } else if (error.message.includes(\"reverted with reason string 'You're not an Arbiter'\")) {\n  //         setReasonRevertCanAdd(\"You're not an  Arbiter\");\n  //       } else {\n  //         console.log(\"Candidate Add Error:\", error);\n  //       }\n  //     }, 1600)\n  //   }\n  // }\n\n  // async function getCandidates() {\n  //   let c = [];\n  //   for (let i = 0; i < candidatesCount; i++) {\n  //     let candidate = await votingContract.getCandidate(i);\n  //     c.push(candidate);\n  //   }\n  //   setCandidates(c);\n  // }\n\n  // if (candidates.length !== candidatesCount) {\n  //   getCandidates();\n  // }\n\n\n  return (\n    <div className=\"App\">\n      {/* <div className=\"box arbiter-box\">\n        <p style={{ \"font-size\": \"25px\", \"textAlign\": \"center\" }} >Arbiter</p>\n        <p>Arbiter Count : {arbiterCount}</p>\n        <br />\n        <label htmlFor='arbiter?'>Arbiter </label>\n        <input id='arbiter?' value={arbiterAddress}\n          onChange={(event) => {\n            setArbiterAddress(event.target.value)\n          }} />\n        <br />\n        <button className=\"button\" id='isArbiter' onClick={getArbiterStatus}>Check</button>\n        <p>Status : {arbiterStatus}</p>\n        <br />\n\n        <br />\n\n        <label htmlFor=\"addArbiter\">Enter arbiter for adding :</label>\n        <input id='addArbiter' value={arbiterApprovalAddress}\n          onChange={(event) => {\n            setArbiterApprovalAddress(event.target.value)\n          }} />\n        <br />\n        <button className=\"button\" id=\"addArbiterButton\" onClick={addArbiter}>Add</button>\n\n        <br />\n\n        <p>{reasonRevertApproval}</p>\n\n\n        <label htmlFor=\"deleteArbiter\">Enter arbiter for delete :</label>\n        <input id='deleteArbiter' value={arbiterDelete}\n          onChange={(event) => {\n            setArbiterDelete(event.target.value);\n          }} />\n        <br />\n        <button className=\"button\" id=\"deleteArbiterButton\" onClick={deleteArbiter}>Approve</button>\n\n        <br />\n\n        <p>{reasonRevertDelete}</p>\n      </div>\n\n      <div className=\"box candidate-box\">\n        <p style={{ \"font-size\": \"25px\", \"textAlign\": \"center\" }}>Candidate</p>\n        <p>No. of candidates : {candidatesCount}</p>\n        <div className=\"box\">\n          <label htmlFor=\"candidateAddress\">Enter candidate Address :</label>\n          <input id='candidateAddress' value={candidateAddress}\n            onChange={(event) => {\n              setCandidateAddress(event.target.value);\n            }} />\n          <br />\n          <label htmlFor=\"candidateName\">Enter candidate Name :</label>\n          <input id='candidateName' value={candidateName}\n            onChange={(event) => {\n              setCandidateName(event.target.value);\n            }} />\n          <br />\n          <label htmlFor=\"candidateSymbol\">Enter candidate Symbol :</label>\n          <input id='candidateSymbol' value={candidateSymbol}\n            onChange={(event) => {\n              setCandidateSymbol(event.target.value);\n            }} />\n\n          <br />\n          <button className=\"button\" id=\"candidateAddButton\" onClick={addCandidateProposal}>Add Candidate Proposal</button>\n          <br />\n          {reasonRevertCanAdd}\n        </div>\n\n        {candidates.map((candidate, index) => {\n          return <Candidate candidate={candidate} key={index} index={index} contract={votingContract} candidatesCountFunction={getCandidatesCount} />;\n\n        })}\n      </div> */}\n      {getArbiterCount ? true : false}\n    </div >\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}