{"ast":null,"code":"var _jsxFileName = \"/Users/mukuljindal/Local/projects/fuckingwork/client/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport abi from './abi.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ethers = require(\"ethers\");\nfunction App() {\n  _s();\n  const [address, setAddress] = useState(\"\");\n  const [arbiterAddress, setArbiterAddress] = useState(\"\");\n  const [arbiterStatus, setArbiterStatus] = useState(\"\");\n  const [candidates, setCandidates] = useState(0);\n  const [provider, setProvider] = useState(null); // State for the provider\n\n  useEffect(() => {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      setProvider(provider); // Setting the provider in state\n\n      async function fetchData() {\n        try {\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          console.log('Connected accounts:', accounts);\n          const signer = provider.getSigner(0);\n          const votingContract = new ethers.Contract(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\", abi, signer);\n          const totalArbiters = await votingContract.arbiterCount();\n          setAddress(totalArbiters.toNumber());\n          const totalCandidates = await votingContract.candidatesCount();\n          setCandidates(totalCandidates.toNumber());\n        } catch (error) {\n          console.error('Error connecting to accounts or fetching contract data:', error);\n        }\n      }\n      fetchData();\n    } else {\n      console.log('Please install MetaMask or another Ethereum-compatible browser extension');\n    }\n  }, [provider]);\n  async function getArbiterStatus() {\n    try {\n      const votingContract = new ethers.Contract(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\", abi, provider.getSigner(0));\n      const resultObj = await votingContract.arbiterStatus(arbiterAddress);\n      const result = resultObj.approved;\n      setArbiterStatus(result.toString());\n      setTimeout(() => {\n        setArbiterAddress(\"\");\n        setArbiterStatus(\"\");\n      }, 1500);\n    } catch (error) {\n      console.error('Error getting arbiter status:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"getAddress\",\n      onClick: () => fetchData(),\n      children: \"Arbiter Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"sWB89OS/bQ78TolOleokXYJQf5g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","abi","jsxDEV","_jsxDEV","ethers","require","App","_s","address","setAddress","arbiterAddress","setArbiterAddress","arbiterStatus","setArbiterStatus","candidates","setCandidates","provider","setProvider","window","ethereum","providers","Web3Provider","fetchData","accounts","request","method","console","log","signer","getSigner","votingContract","Contract","totalArbiters","arbiterCount","toNumber","totalCandidates","candidatesCount","error","getArbiterStatus","resultObj","result","approved","toString","setTimeout","className","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mukuljindal/Local/projects/fuckingwork/client/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport abi from './abi.js';\nconst ethers = require(\"ethers\");\n\nfunction App() {\n  const [address, setAddress] = useState(\"\");\n  const [arbiterAddress, setArbiterAddress] = useState(\"\");\n  const [arbiterStatus, setArbiterStatus] = useState(\"\");\n  const [candidates, setCandidates] = useState(0);\n  const [provider, setProvider] = useState(null); // State for the provider\n\n  useEffect(() => {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      setProvider(provider); // Setting the provider in state\n\n      async function fetchData() {\n        try {\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n          console.log('Connected accounts:', accounts);\n          const signer = provider.getSigner(0);\n\n          const votingContract = new ethers.Contract(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\", abi, signer);\n\n          const totalArbiters = await votingContract.arbiterCount();\n          setAddress(totalArbiters.toNumber());\n\n          const totalCandidates = await votingContract.candidatesCount();\n          setCandidates(totalCandidates.toNumber());\n        } catch (error) {\n          console.error('Error connecting to accounts or fetching contract data:', error);\n        }\n      }\n\n      fetchData();\n    } else {\n      console.log('Please install MetaMask or another Ethereum-compatible browser extension');\n    }\n  }, [provider]);\n\n  async function getArbiterStatus() {\n    try {\n      const votingContract = new ethers.Contract(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\", abi, provider.getSigner(0));\n      const resultObj = await votingContract.arbiterStatus(arbiterAddress);\n      const result = resultObj.approved;\n      setArbiterStatus(result.toString());\n      setTimeout(() => {\n        setArbiterAddress(\"\");\n        setArbiterStatus(\"\");\n      }, 1500);\n    } catch (error) {\n      console.error('Error getting arbiter status:', error);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <button id=\"getAddress\" onClick={() => fetchData()}>Arbiter Count</button>\n      <p>{address}</p>\n      {/* ... rest of the code remains the same ... */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}