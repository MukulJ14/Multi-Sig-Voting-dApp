{"ast":null,"code":"var _jsxFileName = \"/Users/mukuljindal/Local/projects/fuckingwork/client/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport abi from './abi.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ethers = require(\"ethers\");\nfunction App() {\n  _s();\n  const [address, setAddress] = useState(\"\");\n  const [arbiterAddress, setArbiterAddress] = useState(\"\");\n  const [arbiterStatus, setArbiterStatus] = useState(\"\");\n  const [candidates, setCandidates] = useState(0);\n  useEffect(() => {\n    async function setupEthers() {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        try {\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          console.log('Connected accounts:', accounts);\n          const signer = provider.getSigner(0);\n          const votingContract = new ethers.Contract(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\", abi, signer);\n          const contractOwner = await votingContract.owner();\n          console.log('Contract Owner:', contractOwner);\n          const totalArbiters = await votingContract.arbiterCount();\n          setAddress(totalArbiters.toNumber());\n          const totalCandidates = await votingContract.candidatesCount();\n          setCandidates(totalCandidates.toNumber());\n        } catch (error) {\n          console.error('Error connecting to accounts or fetching contract data:', error);\n        }\n      } else {\n        console.log('Please install MetaMask or another Ethereum-compatible browser extension');\n      }\n    }\n    setupEthers();\n  }, []);\n  async function getArbiterStatus() {\n    try {\n      const votingContract = new ethers.Contract(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\", abi, provider.getSigner(0));\n      const resultObj = await votingContract.arbiterStatus(arbiterAddress);\n      const result = resultObj.approved;\n      setArbiterStatus(result.toString());\n      setTimeout(() => {\n        setArbiterAddress(\"\");\n        setArbiterStatus(\"\");\n      }, 1500);\n    } catch (error) {\n      console.error('Error getting arbiter status:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"getAddress\",\n      onClick: getArbiterCount,\n      children: \"Arbiter Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"arbiter?\",\n      children: \"Arbiter \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"arbiter?\",\n      value: arbiterAddress,\n      onChange: event => {\n        setArbiterAddress(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"isAnArbiter\",\n      onClick: getArbiterStatus,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status : \", arbiterStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"No. of candidates : \", candidates]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1QHHCPdemJw6eP7PNRNDO7U9IYc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","abi","jsxDEV","_jsxDEV","ethers","require","App","_s","address","setAddress","arbiterAddress","setArbiterAddress","arbiterStatus","setArbiterStatus","candidates","setCandidates","setupEthers","window","ethereum","provider","providers","Web3Provider","accounts","request","method","console","log","signer","getSigner","votingContract","Contract","contractOwner","owner","totalArbiters","arbiterCount","toNumber","totalCandidates","candidatesCount","error","getArbiterStatus","resultObj","result","approved","toString","setTimeout","className","children","id","onClick","getArbiterCount","fileName","_jsxFileName","lineNumber","columnNumber","for","value","onChange","event","target","_c","$RefreshReg$"],"sources":["/Users/mukuljindal/Local/projects/fuckingwork/client/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport abi from './abi.js';\nconst ethers = require(\"ethers\");\n\nfunction App() {\n  const [address, setAddress] = useState(\"\");\n  const [arbiterAddress, setArbiterAddress] = useState(\"\");\n  const [arbiterStatus, setArbiterStatus] = useState(\"\");\n  const [candidates, setCandidates] = useState(0);\n\n  useEffect(() => {\n    async function setupEthers() {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n        try {\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n          console.log('Connected accounts:', accounts);\n          const signer = provider.getSigner(0);\n\n          const votingContract = new ethers.Contract(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\", abi, signer);\n\n          const contractOwner = await votingContract.owner();\n          console.log('Contract Owner:', contractOwner);\n\n          const totalArbiters = await votingContract.arbiterCount();\n          setAddress(totalArbiters.toNumber());\n\n          const totalCandidates = await votingContract.candidatesCount();\n          setCandidates(totalCandidates.toNumber());\n        } catch (error) {\n          console.error('Error connecting to accounts or fetching contract data:', error);\n        }\n      } else {\n        console.log('Please install MetaMask or another Ethereum-compatible browser extension');\n      }\n    }\n\n    setupEthers();\n  }, []);\n\n  async function getArbiterStatus() {\n    try {\n      const votingContract = new ethers.Contract(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\", abi, provider.getSigner(0));\n      const resultObj = await votingContract.arbiterStatus(arbiterAddress);\n      const result = resultObj.approved;\n      setArbiterStatus(result.toString());\n      setTimeout(() => {\n        setArbiterAddress(\"\");\n        setArbiterStatus(\"\");\n      }, 1500);\n    } catch (error) {\n      console.error('Error getting arbiter status:', error);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <button id=\"getAddress\" onClick={getArbiterCount}>Arbiter Count</button>\n      <p>{address}</p>\n      <br />\n      <label for='arbiter?'>Arbiter </label>\n      <input id='arbiter?' value={arbiterAddress}\n        onChange={(event) => {\n          setArbiterAddress(event.target.value)\n        }} />\n      <button id='isAnArbiter' onClick={getArbiterStatus}>Check</button>\n      <p>Status : {arbiterStatus}</p>\n      <br />\n      <p>No. of candidates : {candidates}</p>\n      {/* 'Check' button for candidates count - missing implementation */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}