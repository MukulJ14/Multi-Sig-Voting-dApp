{"ast":null,"code":"import { connect } from \"net\";\nimport { SocketProvider } from \"./provider-socket.js\";\n// @TODO: Is this sufficient? Is this robust? Will newlines occur between\n// all payloads and only between payloads?\nfunction splitBuffer(data) {\n  const messages = [];\n  let lastStart = 0;\n  while (true) {\n    const nl = data.indexOf(10, lastStart);\n    if (nl === -1) {\n      break;\n    }\n    messages.push(data.subarray(lastStart, nl).toString().trim());\n    lastStart = nl + 1;\n  }\n  return {\n    messages,\n    remaining: data.subarray(lastStart)\n  };\n}\n/**\n *  An **IpcSocketProvider** connects over an IPC socket on the host\n *  which provides fast access to the node, but requires the node and\n *  the script run on the same machine.\n */\nexport class IpcSocketProvider extends SocketProvider {\n  #socket;\n  /**\n   *  The connected socket.\n   */\n  get socket() {\n    return this.#socket;\n  }\n  constructor(path, network, options) {\n    super(network, options);\n    this.#socket = connect(path);\n    this.socket.on(\"ready\", async () => {\n      try {\n        await this._start();\n      } catch (error) {\n        console.log(\"failed to start IpcSocketProvider\", error);\n        // @TODO: Now what? Restart?\n      }\n    });\n\n    let response = Buffer.alloc(0);\n    this.socket.on(\"data\", data => {\n      response = Buffer.concat([response, data]);\n      const {\n        messages,\n        remaining\n      } = splitBuffer(response);\n      messages.forEach(message => {\n        this._processMessage(message);\n      });\n      response = remaining;\n    });\n    this.socket.on(\"end\", () => {\n      this.emit(\"close\");\n      this.socket.destroy();\n      this.socket.end();\n    });\n  }\n  destroy() {\n    this.socket.destroy();\n    this.socket.end();\n    super.destroy();\n  }\n  async _write(message) {\n    this.socket.write(message);\n  }\n}","map":{"version":3,"names":["connect","SocketProvider","splitBuffer","data","messages","lastStart","nl","indexOf","push","subarray","toString","trim","remaining","IpcSocketProvider","socket","constructor","path","network","options","on","_start","error","console","log","response","Buffer","alloc","concat","forEach","message","_processMessage","emit","destroy","end","_write","write"],"sources":["../../src.ts/providers/provider-ipcsocket.ts"],"sourcesContent":[null],"mappings":"AACA,SAASA,OAAO,QAAQ,KAAK;AAC7B,SAASC,cAAc,QAAQ,sBAAsB;AAQrD;AACA;AACA,SAASC,WAAWA,CAACC,IAAY;EAC7B,MAAMC,QAAQ,GAAkB,EAAG;EAEnC,IAAIC,SAAS,GAAG,CAAC;EACjB,OAAO,IAAI,EAAE;IACT,MAAMC,EAAE,GAAGH,IAAI,CAACI,OAAO,CAAC,EAAE,EAAEF,SAAS,CAAC;IACtC,IAAIC,EAAE,KAAK,CAAC,CAAC,EAAE;MAAE;;IACjBF,QAAQ,CAACI,IAAI,CAACL,IAAI,CAACM,QAAQ,CAACJ,SAAS,EAAEC,EAAE,CAAC,CAACI,QAAQ,EAAE,CAACC,IAAI,EAAE,CAAC;IAC7DN,SAAS,GAAGC,EAAE,GAAG,CAAC;;EAGtB,OAAO;IAAEF,QAAQ;IAAEQ,SAAS,EAAET,IAAI,CAACM,QAAQ,CAACJ,SAAS;EAAC,CAAE;AAC5D;AAEA;;;;;AAKA,OAAM,MAAOQ,iBAAkB,SAAQZ,cAAc;EACjD,CAAAa,MAAO;EAEP;;;EAGA,IAAIA,MAAMA,CAAA;IAAa,OAAO,IAAI,CAAC,CAAAA,MAAO;EAAE;EAE5CC,YAAYC,IAAY,EAAEC,OAAoB,EAAEC,OAAmC;IAC/E,KAAK,CAACD,OAAO,EAAEC,OAAO,CAAC;IACvB,IAAI,CAAC,CAAAJ,MAAO,GAAGd,OAAO,CAACgB,IAAI,CAAC;IAE5B,IAAI,CAACF,MAAM,CAACK,EAAE,CAAC,OAAO,EAAE,YAAW;MAC/B,IAAI;QACA,MAAM,IAAI,CAACC,MAAM,EAAE;OACtB,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,KAAK,CAAC;QACvD;;IAER,CAAC,CAAC;;IAEF,IAAIG,QAAQ,GAAGC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACZ,MAAM,CAACK,EAAE,CAAC,MAAM,EAAGhB,IAAI,IAAI;MAC5BqB,QAAQ,GAAGC,MAAM,CAACE,MAAM,CAAC,CAAEH,QAAQ,EAAErB,IAAI,CAAE,CAAC;MAC5C,MAAM;QAAEC,QAAQ;QAAEQ;MAAS,CAAE,GAAGV,WAAW,CAACsB,QAAQ,CAAC;MACrDpB,QAAQ,CAACwB,OAAO,CAAEC,OAAO,IAAI;QACzB,IAAI,CAACC,eAAe,CAACD,OAAO,CAAC;MACjC,CAAC,CAAC;MACFL,QAAQ,GAAGZ,SAAS;IACxB,CAAC,CAAC;IAEF,IAAI,CAACE,MAAM,CAACK,EAAE,CAAC,KAAK,EAAE,MAAK;MACvB,IAAI,CAACY,IAAI,CAAC,OAAO,CAAC;MAClB,IAAI,CAACjB,MAAM,CAACkB,OAAO,EAAE;MACrB,IAAI,CAAClB,MAAM,CAACmB,GAAG,EAAE;IACrB,CAAC,CAAC;EACN;EAEAD,OAAOA,CAAA;IACH,IAAI,CAAClB,MAAM,CAACkB,OAAO,EAAE;IACrB,IAAI,CAAClB,MAAM,CAACmB,GAAG,EAAE;IAEjB,KAAK,CAACD,OAAO,EAAE;EACnB;EAEA,MAAME,MAAMA,CAACL,OAAe;IACxB,IAAI,CAACf,MAAM,CAACqB,KAAK,CAACN,OAAO,CAAC;EAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}