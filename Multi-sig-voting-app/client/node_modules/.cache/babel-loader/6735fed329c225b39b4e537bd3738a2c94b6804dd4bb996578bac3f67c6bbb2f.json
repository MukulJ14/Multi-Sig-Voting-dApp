{"ast":null,"code":"var _jsxFileName = \"/Users/mukuljindal/Local/projects/fuckingwork/client/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport abi from './abi.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ethers = require(\"ethers\");\nconst hre = require(\"hardhat\");\n\n//contract address : 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\n\n//add getter functions inside the contract to actually access anything through mappings\n//to access values of a struct in mapping, first return the promise, then use the variable rather than doing simultaneously\n\n//const provider = new ethers.providers.Web3Provider(window.ethereum);\nconst provider = new hre.ethers.JsonRpcProvider(\"http://127.0.0.1:8545/\");\nconst accounts = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n});\nconsole.log('Connected accounts:', accounts);\nconst signer = provider.getSigner(0);\nconst votingContract = new ethers.Contract(\"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\", abi, signer);\nasync function arbitersNum() {\n  const totalArbiters = await votingContract.arbiterCount();\n  const num = totalArbiters.toNumber();\n  return num;\n}\nasync function candidatesNum() {\n  let totalCan = await votingContract.candidatesCount();\n  let num = totalCan.toNumber();\n  return num;\n}\nfunction App() {\n  _s();\n  const [address, setAddress] = useState(\"\");\n  const [arbiterAddress, setArbiterAddress] = useState(\"\");\n  const [arbiterStatus, setArbiterStatus] = useState(\"\");\n  const [candidates, setCandidates] = useState(0);\n  const [provider, setProvider] = useState(null);\n  const [votingContract, setContract] = useState(\"\");\n  async function connect() {\n    if (window.ethereum) {\n      const provider = new hre.ethers.JsonRpcProvider(\"http://127.0.0.1:8545/\");\n      setProvider(provider);\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Connected accounts:', accounts);\n      const signer = provider.getSigner(0);\n      const votingContract = new ethers.Contract(\"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\", abi, signer);\n      setContract(votingContract);\n    }\n  }\n  useEffect(() => {\n    connect();\n  }, []);\n  async function contractowner() {\n    const contractOwner = await votingContract.owner();\n    console.log('Contract Owner:', contractOwner);\n  }\n  contractowner();\n  async function getArbiterCount() {\n    const result = await arbitersNum();\n    setAddress(result);\n    setTimeout(() => {\n      setAddress(\"\");\n    }, 1500);\n  }\n  async function getCandidatesCount() {\n    const result = await candidatesNum();\n    setAddress(result);\n  }\n  async function getArbiterStatus() {\n    const resultObj = await votingContract.arbiterStatus(arbiterAddress);\n    const result = resultObj.approved;\n    setArbiterStatus(result.toString());\n    setTimeout(() => {\n      setArbiterAddress(\"\");\n      setArbiterStatus(\"\");\n    }, 1500);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"getAddress\",\n      onClick: getArbiterCount,\n      children: \"Arbiter Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"arbiter?\",\n      children: \"Arbiter \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"arbiter?\",\n      value: arbiterAddress,\n      onChange: event => {\n        setArbiterAddress(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"isAnArbiter\",\n      onClick: getArbiterStatus,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status : \", arbiterStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"No. of candidates : \", candidates]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"candidatesCount\",\n      onClick: getCandidatesCount,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jccJaN5579RgUIsZpUxW7lJTbX8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","abi","jsxDEV","_jsxDEV","ethers","require","hre","provider","JsonRpcProvider","accounts","window","ethereum","request","method","console","log","signer","getSigner","votingContract","Contract","arbitersNum","totalArbiters","arbiterCount","num","toNumber","candidatesNum","totalCan","candidatesCount","App","_s","address","setAddress","arbiterAddress","setArbiterAddress","arbiterStatus","setArbiterStatus","candidates","setCandidates","setProvider","setContract","connect","contractowner","contractOwner","owner","getArbiterCount","result","setTimeout","getCandidatesCount","getArbiterStatus","resultObj","approved","toString","className","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","for","value","onChange","event","target","_c","$RefreshReg$"],"sources":["/Users/mukuljindal/Local/projects/fuckingwork/client/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport abi from './abi.js';\nconst ethers = require(\"ethers\");\nconst hre = require(\"hardhat\");\n\n//contract address : 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\n\n\n//add getter functions inside the contract to actually access anything through mappings\n//to access values of a struct in mapping, first return the promise, then use the variable rather than doing simultaneously\n\n\n\n//const provider = new ethers.providers.Web3Provider(window.ethereum);\nconst provider = new hre.ethers.JsonRpcProvider(\"http://127.0.0.1:8545/\")\n\nconst accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\nconsole.log('Connected accounts:', accounts);\nconst signer = provider.getSigner(0);\n\n\nconst votingContract = new ethers.Contract(\"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\", abi, signer);\n\n\nasync function arbitersNum() {\n  const totalArbiters = await votingContract.arbiterCount();\n  const num = totalArbiters.toNumber();\n  return num;\n}\n\nasync function candidatesNum() {\n  let totalCan = await votingContract.candidatesCount();\n  let num = totalCan.toNumber();\n  return num;\n}\n\nfunction App() {\n\n  const [address, setAddress] = useState(\"\");\n  const [arbiterAddress, setArbiterAddress] = useState(\"\");\n  const [arbiterStatus, setArbiterStatus] = useState(\"\");\n  const [candidates, setCandidates] = useState(0);\n  const [provider, setProvider] = useState(null);\n  const [votingContract, setContract] = useState(\"\");\n\n  async function connect() {\n    if (window.ethereum) {\n      const provider = new hre.ethers.JsonRpcProvider(\"http://127.0.0.1:8545/\")\n      setProvider(provider);\n\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      console.log('Connected accounts:', accounts);\n      const signer = provider.getSigner(0);\n\n      const votingContract = new ethers.Contract(\"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\", abi, signer);\n      setContract(votingContract);\n\n    }\n  }\n\n  useEffect(() => {\n    connect();\n  }, []);\n\n\n  async function contractowner() {\n    const contractOwner = await votingContract.owner();\n    console.log('Contract Owner:', contractOwner);\n  }\n  contractowner();\n\n  async function getArbiterCount() {\n    const result = await arbitersNum()\n    setAddress(result);\n    setTimeout(() => {\n      setAddress(\"\");\n    }, 1500);\n\n  }\n\n  async function getCandidatesCount() {\n    const result = await candidatesNum()\n    setAddress(result);\n  }\n\n  async function getArbiterStatus() {\n    const resultObj = await votingContract.arbiterStatus(arbiterAddress);\n    const result = resultObj.approved;\n    setArbiterStatus(result.toString());\n    setTimeout(() => {\n      setArbiterAddress(\"\");\n      setArbiterStatus(\"\");\n    }, 1500);\n  }\n\n  return (\n    <div className=\"App\">\n      <button id=\"getAddress\" onClick={getArbiterCount}>Arbiter Count</button>\n      <p>{address}</p>\n      <br />\n      <label for='arbiter?'>Arbiter </label>\n      <input id='arbiter?' value={arbiterAddress}\n        onChange={(event) => {\n          setArbiterAddress(event.target.value)\n        }} />\n      <button id='isAnArbiter' onClick={getArbiterStatus}>Check</button>\n      <p>Status : {arbiterStatus}</p>\n      <br />\n      <p>No. of candidates : {candidates}</p>\n      <button id='candidatesCount' onClick={getCandidatesCount}>Check</button>\n\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}