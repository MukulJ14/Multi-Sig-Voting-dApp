{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.digest64HashObjects = exports.digest2Bytes32 = exports.digest64 = exports.digest = exports.SHA256 = exports.hashObjectToByteArray = exports.byteArrayToHashObject = void 0;\nconst wasm_1 = require(\"./wasm\");\nconst hashObject_1 = require(\"./hashObject\");\nObject.defineProperty(exports, \"byteArrayToHashObject\", {\n  enumerable: true,\n  get: function () {\n    return hashObject_1.byteArrayToHashObject;\n  }\n});\nObject.defineProperty(exports, \"hashObjectToByteArray\", {\n  enumerable: true,\n  get: function () {\n    return hashObject_1.hashObjectToByteArray;\n  }\n});\nconst sha256_1 = __importDefault(require(\"./sha256\"));\nexports.SHA256 = sha256_1.default;\nconst ctx = wasm_1.newInstance();\nconst wasmInputValue = ctx.input.value;\nconst wasmOutputValue = ctx.output.value;\nconst inputUint8Array = new Uint8Array(ctx.memory.buffer, wasmInputValue, ctx.INPUT_LENGTH);\nconst outputUint8Array = new Uint8Array(ctx.memory.buffer, wasmOutputValue, 32);\nconst inputUint32Array = new Uint32Array(ctx.memory.buffer, wasmInputValue, ctx.INPUT_LENGTH);\nfunction digest(data) {\n  if (data.length === 64) {\n    return digest64(data);\n  }\n  if (data.length <= ctx.INPUT_LENGTH) {\n    inputUint8Array.set(data);\n    ctx.digest(data.length);\n    const output = new Uint8Array(32);\n    output.set(outputUint8Array);\n    return output;\n  }\n  ctx.init();\n  update(data);\n  return final();\n}\nexports.digest = digest;\nfunction digest64(data) {\n  if (data.length === 64) {\n    inputUint8Array.set(data);\n    ctx.digest64(wasmInputValue, wasmOutputValue);\n    const output = new Uint8Array(32);\n    output.set(outputUint8Array);\n    return output;\n  }\n  throw new Error(\"InvalidLengthForDigest64\");\n}\nexports.digest64 = digest64;\nfunction digest2Bytes32(bytes1, bytes2) {\n  if (bytes1.length === 32 && bytes2.length === 32) {\n    inputUint8Array.set(bytes1);\n    inputUint8Array.set(bytes2, 32);\n    ctx.digest64(wasmInputValue, wasmOutputValue);\n    const output = new Uint8Array(32);\n    output.set(outputUint8Array);\n    return output;\n  }\n  throw new Error(\"InvalidLengthForDigest64\");\n}\nexports.digest2Bytes32 = digest2Bytes32;\n/**\n * Digest 2 objects, each has 8 properties from h0 to h7.\n * The performance is a little bit better than digest64 due to the use of Uint32Array\n * and the memory is a little bit better than digest64 due to no temporary Uint8Array.\n * @returns\n */\nfunction digest64HashObjects(obj1, obj2) {\n  // TODO: expect obj1 and obj2 as HashObject\n  inputUint32Array[0] = obj1.h0;\n  inputUint32Array[1] = obj1.h1;\n  inputUint32Array[2] = obj1.h2;\n  inputUint32Array[3] = obj1.h3;\n  inputUint32Array[4] = obj1.h4;\n  inputUint32Array[5] = obj1.h5;\n  inputUint32Array[6] = obj1.h6;\n  inputUint32Array[7] = obj1.h7;\n  inputUint32Array[8] = obj2.h0;\n  inputUint32Array[9] = obj2.h1;\n  inputUint32Array[10] = obj2.h2;\n  inputUint32Array[11] = obj2.h3;\n  inputUint32Array[12] = obj2.h4;\n  inputUint32Array[13] = obj2.h5;\n  inputUint32Array[14] = obj2.h6;\n  inputUint32Array[15] = obj2.h7;\n  ctx.digest64(wasmInputValue, wasmOutputValue);\n  // extracting numbers from Uint32Array causes more memory\n  return hashObject_1.byteArrayToHashObject(outputUint8Array);\n}\nexports.digest64HashObjects = digest64HashObjects;\nfunction update(data) {\n  const INPUT_LENGTH = ctx.INPUT_LENGTH;\n  if (data.length > INPUT_LENGTH) {\n    for (let i = 0; i < data.length; i += INPUT_LENGTH) {\n      const sliced = data.slice(i, i + INPUT_LENGTH);\n      inputUint8Array.set(sliced);\n      ctx.update(wasmInputValue, sliced.length);\n    }\n  } else {\n    inputUint8Array.set(data);\n    ctx.update(wasmInputValue, data.length);\n  }\n}\nfunction final() {\n  ctx.final(wasmOutputValue);\n  const output = new Uint8Array(32);\n  output.set(outputUint8Array);\n  return output;\n}","map":{"version":3,"names":["wasm_1","require","hashObject_1","Object","defineProperty","exports","enumerable","get","byteArrayToHashObject","hashObjectToByteArray","sha256_1","__importDefault","SHA256","default","ctx","newInstance","wasmInputValue","input","value","wasmOutputValue","output","inputUint8Array","Uint8Array","memory","buffer","INPUT_LENGTH","outputUint8Array","inputUint32Array","Uint32Array","digest","data","length","digest64","set","init","update","final","Error","digest2Bytes32","bytes1","bytes2","digest64HashObjects","obj1","obj2","h0","h1","h2","h3","h4","h5","h6","h7","i","sliced","slice"],"sources":["../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}