{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bytesToBigInt = exports.bytesToHex = exports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.toBytes = exports.unprefixedHexToBytes = exports.intToBytes = exports.hexToBytes = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.bigIntToBytes = exports.intToBuffer = exports.intToHex = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst internal_1 = require(\"./internal\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`);\n  }\n  return `0x${i.toString(16)}`;\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nconst intToBuffer = function (i) {\n  const hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n *  * @param {bigint} num the bigint to convert\n * @returns {Uint8Array}\n */\nconst bigIntToBytes = num => {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  return (0, exports.toBytes)('0x' + (0, internal_1.padToEven)(num.toString(16)));\n};\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nconst zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg, length, right) {\n  const buf = (0, exports.zeros)(length);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthLeft = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthRight = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a) {\n  let first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nconst unpadBuffer = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nconst unpadArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nconst unpadHexString = function (a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return '0x' + stripZeros(a);\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nconst toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n    }\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);\n    }\n    let n = v.toString(16);\n    if (n.length % 2) n = '0' + n;\n    return Buffer.from(n, 'hex');\n  }\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n  throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nconst bufferToHex = function (buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nfunction bufferToBigInt(buf) {\n  const hex = (0, exports.bufferToHex)(buf);\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n  return BigInt(hex);\n}\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nfunction bigIntToBuffer(num) {\n  return (0, exports.toBuffer)('0x' + num.toString(16));\n}\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nconst bufferToInt = function (buf) {\n  const res = Number(bufferToBigInt(buf));\n  if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits');\n  return res;\n};\nexports.bufferToInt = bufferToInt;\nconst hexToBytes = hex => {\n  if (typeof hex !== 'string') {\n    throw new Error(`hex argument type ${typeof hex} must be of type string`);\n  }\n  if (!hex.startsWith('0x')) {\n    throw new Error(`prefixed hex input should start with 0x, got ${hex.substring(0, 2)}`);\n  }\n  hex = hex.slice(2);\n  if (hex.length % 2 !== 0) {\n    hex = (0, internal_1.padToEven)(hex);\n  }\n  const byteLen = hex.length / 2;\n  const bytes = new Uint8Array(byteLen);\n  for (let i = 0; i < byteLen; i++) {\n    const byte = parseInt(hex.slice(i * 2, (i + 1) * 2), 16);\n    bytes[i] = byte;\n  }\n  return bytes;\n};\nexports.hexToBytes = hexToBytes;\n/**\n * Converts an {@link number} to a {@link Uint8Array}\n * @param {Number} i\n * @return {Uint8Array}\n */\nconst intToBytes = i => {\n  const hex = (0, exports.intToHex)(i);\n  return (0, exports.hexToBytes)(hex);\n};\nexports.intToBytes = intToBytes;\nconst _unprefixedHexToBytes = data => {\n  const hex = data.startsWith('0x') ? data.substring(2) : data;\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n};\nconst unprefixedHexToBytes = inp => {\n  if (inp.slice(0, 2) === '0x') {\n    throw new Error('hex string is prefixed with 0x, should be unprefixed');\n  } else {\n    return _unprefixedHexToBytes((0, internal_1.padToEven)(inp));\n  }\n};\nexports.unprefixedHexToBytes = unprefixedHexToBytes;\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBytes()` method.\n * @param {ToBytesInputTypes} v the value\n * @return {Uint8Array}\n */\nconst toBytes = v => {\n  if (v === null || v === undefined) {\n    return new Uint8Array();\n  }\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Uint8Array.from(v);\n  }\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(`Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`);\n    }\n    return (0, exports.hexToBytes)(v);\n  }\n  if (typeof v === 'number') {\n    return (0, exports.intToBytes)(v);\n  }\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n    }\n    let n = v.toString(16);\n    if (n.length % 2) n = '0' + n;\n    return (0, exports.unprefixedHexToBytes)(n);\n  }\n  if (v.toBytes !== undefined) {\n    // converts a `TransformableToBytes` object to a Uint8Array\n    return v.toBytes();\n  }\n  throw new Error('invalid type');\n};\nexports.toBytes = toBytes;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nconst fromSigned = function (num) {\n  return BigInt.asIntN(256, bufferToBigInt(num));\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nconst toUnsigned = function (num) {\n  return bigIntToBuffer(BigInt.asUintN(256, num));\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nconst addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nfunction short(buffer, maxLength = 50) {\n  const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer;\n  if (bufferStr.length <= maxLength) {\n    return bufferStr;\n  }\n  return bufferStr.slice(0, maxLength) + '…';\n}\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nconst toUtf8 = function (hex) {\n  const zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nconst baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return `0x${ba.toString('hex')}`;\n  } else if (ba instanceof Array) {\n    const array = [];\n    for (let i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n    return array;\n  }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = function (values) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`);\n    }\n  }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr);\n  }\n  return arr.map(a => arrToBufArr(a));\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr ?? []);\n  }\n  return arr.map(a => bufArrToArr(a));\n}\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nconst bigIntToHex = num => {\n  return '0x' + num.toString(16);\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bigIntToUnpaddedBuffer(value) {\n  return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;\nfunction intToUnpaddedBuffer(value) {\n  return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));\n}\nexports.intToUnpaddedBuffer = intToUnpaddedBuffer;\n/****************  Borrowed from @chainsafe/ssz */\n// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = Array.from({\n  length: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\nconst bytesToHex = bytes => {\n  let hex = '0x';\n  if (bytes === undefined || bytes.length === 0) return hex;\n  for (const byte of bytes) {\n    hex += hexByByte[byte];\n  }\n  return hex;\n};\nexports.bytesToHex = bytesToHex;\nconst bytesToBigInt = bytes => {\n  const hex = (0, exports.bytesToHex)(bytes);\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n  return BigInt(hex);\n};\nexports.bytesToBigInt = bytesToBigInt;","map":{"version":3,"names":["helpers_1","require","internal_1","intToHex","i","Number","isSafeInteger","Error","toString","exports","intToBuffer","hex","Buffer","from","padToEven","slice","bigIntToBytes","num","toBytes","zeros","bytes","allocUnsafe","fill","setLength","msg","length","right","buf","copy","setLengthLeft","assertIsBuffer","setLengthRight","stripZeros","a","first","unpadBuffer","unpadArray","assertIsArray","unpadHexString","assertIsHexString","stripHexPrefix","toBuffer","v","undefined","isBuffer","Array","isArray","Uint8Array","isHexString","BigInt","n","toArray","bufferToHex","bufferToBigInt","bigIntToBuffer","bufferToInt","res","hexToBytes","startsWith","substring","byteLen","byte","parseInt","intToBytes","_unprefixedHexToBytes","data","len","array","j","hexByte","isNaN","unprefixedHexToBytes","inp","fromSigned","asIntN","toUnsigned","asUintN","addHexPrefix","str","isHexPrefixed","short","buffer","maxLength","bufferStr","toUtf8","zerosRegexp","bufferVal","replace","baToJSON","ba","push","validateNoLeadingZeroes","values","k","Object","entries","arrToBufArr","arr","map","bufArrToArr","bigIntToHex","bigIntToUnpaddedBuffer","value","intToUnpaddedBuffer","hexByByte","padStart","bytesToHex","bytesToBigInt"],"sources":["/Users/mukuljindal/Local/projects/voting/node_modules/@nomicfoundation/ethereumjs-util/src/bytes.ts"],"sourcesContent":["import { assertIsArray, assertIsBuffer, assertIsHexString } from './helpers'\nimport { isHexPrefixed, isHexString, padToEven, stripHexPrefix } from './internal'\n\nimport type {\n  NestedBufferArray,\n  NestedUint8Array,\n  PrefixedHexString,\n  TransformableToArray,\n  TransformableToBuffer,\n  TransformabletoBytes,\n} from './types'\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nexport const intToHex = function (i: number) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`)\n  }\n  return `0x${i.toString(16)}`\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nexport const intToBuffer = function (i: number) {\n  const hex = intToHex(i)\n  return Buffer.from(padToEven(hex.slice(2)), 'hex')\n}\n\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n *  * @param {bigint} num the bigint to convert\n * @returns {Uint8Array}\n */\nexport const bigIntToBytes = (num: bigint): Uint8Array => {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  return toBytes('0x' + padToEven(num.toString(16)))\n}\n\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexport const zeros = function (bytes: number): Buffer {\n  return Buffer.allocUnsafe(bytes).fill(0)\n}\n\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg: Buffer, length: number, right: boolean) {\n  const buf = zeros(length)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthLeft = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, false)\n}\n\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthRight = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, true)\n}\n\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a: any): Buffer | number[] | string {\n  let first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nexport const unpadBuffer = function (a: Buffer): Buffer {\n  assertIsBuffer(a)\n  return stripZeros(a) as Buffer\n}\n\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nexport const unpadArray = function (a: number[]): number[] {\n  assertIsArray(a)\n  return stripZeros(a) as number[]\n}\n\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nexport const unpadHexString = function (a: string): string {\n  assertIsHexString(a)\n  a = stripHexPrefix(a)\n  return ('0x' + stripZeros(a)) as string\n}\n\nexport type ToBufferInputTypes =\n  | PrefixedHexString\n  | number\n  | bigint\n  | Buffer\n  | Uint8Array\n  | number[]\n  | TransformableToArray\n  | TransformableToBuffer\n  | null\n  | undefined\n\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexport const toBuffer = function (v: ToBufferInputTypes): Buffer {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0)\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v)\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v as Uint8Array)\n  }\n\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(\n        `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`\n      )\n    }\n    return Buffer.from(padToEven(stripHexPrefix(v)), 'hex')\n  }\n\n  if (typeof v === 'number') {\n    return intToBuffer(v)\n  }\n\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`)\n    }\n    let n = v.toString(16)\n    if (n.length % 2) n = '0' + n\n    return Buffer.from(n, 'hex')\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray())\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer())\n  }\n\n  throw new Error('invalid type')\n}\n\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexport const bufferToHex = function (buf: Buffer): string {\n  buf = toBuffer(buf)\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nexport function bufferToBigInt(buf: Buffer) {\n  const hex = bufferToHex(buf)\n  if (hex === '0x') {\n    return BigInt(0)\n  }\n  return BigInt(hex)\n}\n\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nexport function bigIntToBuffer(num: bigint) {\n  return toBuffer('0x' + num.toString(16))\n}\n\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexport const bufferToInt = function (buf: Buffer): number {\n  const res = Number(bufferToBigInt(buf))\n  if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits')\n  return res\n}\n\nexport const hexToBytes = (hex: string): Uint8Array => {\n  if (typeof hex !== 'string') {\n    throw new Error(`hex argument type ${typeof hex} must be of type string`)\n  }\n\n  if (!hex.startsWith('0x')) {\n    throw new Error(`prefixed hex input should start with 0x, got ${hex.substring(0, 2)}`)\n  }\n\n  hex = hex.slice(2)\n\n  if (hex.length % 2 !== 0) {\n    hex = padToEven(hex)\n  }\n\n  const byteLen = hex.length / 2\n  const bytes = new Uint8Array(byteLen)\n  for (let i = 0; i < byteLen; i++) {\n    const byte = parseInt(hex.slice(i * 2, (i + 1) * 2), 16)\n    bytes[i] = byte\n  }\n  return bytes\n}\n\n/**\n * Converts an {@link number} to a {@link Uint8Array}\n * @param {Number} i\n * @return {Uint8Array}\n */\nexport const intToBytes = (i: number): Uint8Array => {\n  const hex = intToHex(i)\n  return hexToBytes(hex)\n}\n\nconst _unprefixedHexToBytes = (data: string) => {\n  const hex = data.startsWith('0x') ? data.substring(2) : data\n\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex)\n  const len = hex.length\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len)\n  const array = new Uint8Array(len / 2)\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2\n    const hexByte = hex.slice(j, j + 2)\n    const byte = Number.parseInt(hexByte, 16)\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence')\n    array[i] = byte\n  }\n  return array\n}\n\nexport const unprefixedHexToBytes = (inp: string) => {\n  if (inp.slice(0, 2) === '0x') {\n    throw new Error('hex string is prefixed with 0x, should be unprefixed')\n  } else {\n    return _unprefixedHexToBytes(padToEven(inp))\n  }\n}\n\nexport type ToBytesInputTypes =\n  | PrefixedHexString\n  | number\n  | bigint\n  | Uint8Array\n  | number[]\n  | TransformabletoBytes\n  | null\n  | undefined\n\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBytes()` method.\n * @param {ToBytesInputTypes} v the value\n * @return {Uint8Array}\n */\nexport const toBytes = (v: ToBytesInputTypes): Uint8Array => {\n  if (v === null || v === undefined) {\n    return new Uint8Array()\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Uint8Array.from(v)\n  }\n\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(\n        `Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`\n      )\n    }\n    return hexToBytes(v)\n  }\n\n  if (typeof v === 'number') {\n    return intToBytes(v)\n  }\n\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`)\n    }\n    let n = v.toString(16)\n    if (n.length % 2) n = '0' + n\n    return unprefixedHexToBytes(n)\n  }\n\n  if (v.toBytes !== undefined) {\n    // converts a `TransformableToBytes` object to a Uint8Array\n    return v.toBytes()\n  }\n\n  throw new Error('invalid type')\n}\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexport const fromSigned = function (num: Buffer): bigint {\n  return BigInt.asIntN(256, bufferToBigInt(num))\n}\n\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexport const toUnsigned = function (num: bigint): Buffer {\n  return bigIntToBuffer(BigInt.asUintN(256, num))\n}\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexport const addHexPrefix = function (str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  return isHexPrefixed(str) ? str : '0x' + str\n}\n\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nexport function short(buffer: Buffer | string, maxLength: number = 50): string {\n  const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer\n  if (bufferStr.length <= maxLength) {\n    return bufferStr\n  }\n  return bufferStr.slice(0, maxLength) + '…'\n}\n\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nexport const toUtf8 = function (hex: string): string {\n  const zerosRegexp = /^(00)+|(00)+$/g\n  hex = stripHexPrefix(hex)\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided')\n  }\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex')\n\n  return bufferVal.toString('utf8')\n}\n\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexport const baToJSON = function (ba: any): any {\n  if (Buffer.isBuffer(ba)) {\n    return `0x${ba.toString('hex')}`\n  } else if (ba instanceof Array) {\n    const array = []\n    for (let i = 0; i < ba.length; i++) {\n      array.push(baToJSON(ba[i]))\n    }\n    return array\n  }\n}\n\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nexport const validateNoLeadingZeroes = function (values: { [key: string]: Buffer | undefined }) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`)\n    }\n  }\n}\n\n/**\n * Converts a {@link Uint8Array} or {@link NestedUint8Array} to {@link Buffer} or {@link NestedBufferArray}\n */\nexport function arrToBufArr(arr: Uint8Array): Buffer\nexport function arrToBufArr(arr: NestedUint8Array): NestedBufferArray\nexport function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray\nexport function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr)\n  }\n  return arr.map((a) => arrToBufArr(a))\n}\n\n/**\n * Converts a {@link Buffer} or {@link NestedBufferArray} to {@link Uint8Array} or {@link NestedUint8Array}\n */\nexport function bufArrToArr(arr: Buffer): Uint8Array\nexport function bufArrToArr(arr: NestedBufferArray): NestedUint8Array\nexport function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array\nexport function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr ?? [])\n  }\n  return arr.map((a) => bufArrToArr(a))\n}\n\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nexport const bigIntToHex = (num: bigint) => {\n  return '0x' + num.toString(16)\n}\n\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nexport function bigIntToUnpaddedBuffer(value: bigint): Buffer {\n  return unpadBuffer(bigIntToBuffer(value))\n}\n\nexport function intToUnpaddedBuffer(value: number): Buffer {\n  return unpadBuffer(intToBuffer(value))\n}\n\n/****************  Borrowed from @chainsafe/ssz */\n// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'))\n\nexport const bytesToHex = (bytes: Uint8Array): string => {\n  let hex = '0x'\n  if (bytes === undefined || bytes.length === 0) return hex\n  for (const byte of bytes) {\n    hex += hexByByte[byte]\n  }\n  return hex\n}\n\nexport const bytesToBigInt = (bytes: Uint8Array): bigint => {\n  const hex = bytesToHex(bytes)\n  if (hex === '0x') {\n    return BigInt(0)\n  }\n  return BigInt(hex)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}